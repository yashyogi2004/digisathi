<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gemini AI Chatbot</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f8fa;
        }
        header {
            text-align: center;
            margin-bottom: 20px;
            padding: 10px;
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        h1 {
            margin: 0;
            font-size: 2.2em;
        }
        .description {
            font-size: 1.1em;
            margin-top: 8px;
            opacity: 0.9;
        }
        .chat-container {
            display: flex;
            height: calc(100vh - 200px);
            min-height: 500px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 80%;
            animation: fadeIn 0.3s ease-in-out;
            position: relative;
            overflow-wrap: break-word;
            word-wrap: break-word;
            word-break: break-word;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .user-message {
            background-color: #dcf8c6;
            color: #000;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
        }
        .bot-message {
            background-color: #f1f0f0;
            color: #000;
            align-self: flex-start;
            border-bottom-left-radius: 4px;
        }
        .message-text {
            white-space: pre-wrap;
        }
        .bot-message code {
            background-color: #2d2d2d;
            color: #f8f8f2;
            padding: 2px 5px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }
        .bot-message pre {
            background-color: #2d2d2d;
            color: #f8f8f2;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
            font-family: 'Courier New', monospace;
        }
        .input-container {
            padding: 15px;
            border-top: 1px solid #e0e0e0;
            background-color: white;
            position: sticky;
            bottom: 0;
            display: flex;
            align-items: center;
        }
        #user-input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ccc;
            border-radius: 24px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
            resize: none;
            max-height: 120px;
            overflow-y: auto;
        }
        #user-input:focus {
            border-color: #a777e3;
        }
        #send-button {
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            color: white;
            border: none;
            border-radius: 50%;
            width: 46px;
            height: 46px;
            margin-left: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        #send-button:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }
        #send-button:active {
            transform: scale(0.98);
        }
        #send-button:disabled {
            background: #cccccc;
            cursor: not-allowed;
        }
        .loading {
            display: flex;
            padding: 15px;
            align-self: flex-start;
            margin-bottom: 15px;
        }
        .loading span {
            width: 10px;
            height: 10px;
            background-color: #a0a0a0;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
            animation: bounce 1.5s infinite ease-in-out;
        }
        .loading span:nth-child(1) { animation-delay: 0s; }
        .loading span:nth-child(2) { animation-delay: 0.2s; }
        .loading span:nth-child(3) { animation-delay: 0.4s; }
        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1); }
        }
        .timestamp {
            font-size: 0.7em;
            opacity: 0.7;
            margin-top: 5px;
            text-align: right;
        }
        @media (max-width: 768px) {
            .chat-container {
                height: calc(100vh - 180px);
                min-height: 400px;
            }
            .message {
                max-width: 90%;
            }
        }
        #error-message {
            color: #e74c3c;
            text-align: center;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
            background-color: #fdeaea;
            display: none;
        }
    </style>
</head>
<body>
    <header>
        <h1>MediSupport</h1>
        <p class="description">Ask anything to the MediSupport AI powered chatbot</p>
    </header>

    <div id="error-message"></div>

    <div class="chat-container">
        <div class="chat-messages" id="chat-messages">
            <div class="message bot-message">
                <div class="message-text">Hello! I'm your Gemini AI assistant. How can I help you today?</div>
                <div class="timestamp">Just now</div>
            </div>
        </div>
    </div>

    <div class="input-container">
        <textarea id="user-input" placeholder="Type your message here..." rows="1"></textarea>
        <button id="send-button">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z" fill="white"/>
            </svg>
        </button>
    </div>

    <script>
        const chatMessages = document.getElementById('chat-messages');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const errorMessageElement = document.getElementById('error-message');

        // Adjust textarea height based on content
        userInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
            // Limit max height
            if (this.scrollHeight > 120) {
                this.style.overflowY = 'auto';
            } else {
                this.style.overflowY = 'hidden';
            }
        });

        // Allow sending message with Enter (but Shift+Enter for new line)
        userInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        sendButton.addEventListener('click', sendMessage);

        function getCurrentTime() {
            const now = new Date();
            return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function formatMessageWithCodeBlocks(message) {
            // Format code blocks
            let formattedMessage = message.replace(/```([\s\S]*?)```/g, function(match, code) {
                return `<pre>${escapeHtml(code.trim())}</pre>`;
            });
            
            // Format inline code
            formattedMessage = formattedMessage.replace(/`([^`]+)`/g, function(match, code) {
                return `<code>${escapeHtml(code)}</code>`;
            });
            
            return formattedMessage;
        }

        async function sendMessage() {
            const message = userInput.value.trim();
            if (!message) return;

            // Clear input and reset height
            userInput.value = '';
            userInput.style.height = 'auto';

            // Add user message to chat
            const userMessageElement = document.createElement('div');
            userMessageElement.className = 'message user-message';
            userMessageElement.innerHTML = `
                <div class="message-text">${escapeHtml(message)}</div>
                <div class="timestamp">${getCurrentTime()}</div>
            `;
            chatMessages.appendChild(userMessageElement);

            // Add loading animation
            const loadingElement = document.createElement('div');
            loadingElement.className = 'loading';
            loadingElement.innerHTML = `
                <span></span>
                <span></span>
                <span></span>
            `;
            chatMessages.appendChild(loadingElement);
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // Disable input during processing
            userInput.disabled = true;
            sendButton.disabled = true;

            try {
                // Send message to server
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message }),
                });

                // Remove loading animation
                chatMessages.removeChild(loadingElement);

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Error communicating with the server');
                }

                const data = await response.json();
                
                // Add bot response to chat
                const botMessageElement = document.createElement('div');
                botMessageElement.className = 'message bot-message';
                botMessageElement.innerHTML = `
                    <div class="message-text">${formatMessageWithCodeBlocks(data.response)}</div>
                    <div class="timestamp">${getCurrentTime()}</div>
                `;
                chatMessages.appendChild(botMessageElement);

                // Hide any previous error
                errorMessageElement.style.display = 'none';
            } catch (error) {
                // Show error in UI
                console.error('Error:', error);
                errorMessageElement.textContent = error.message || 'Failed to communicate with the server';
                errorMessageElement.style.display = 'block';
                
                // Remove loading animation on error
                if (chatMessages.contains(loadingElement)) {
                    chatMessages.removeChild(loadingElement);
                }
            } finally {
                // Re-enable input
                userInput.disabled = false;
                sendButton.disabled = false;
                userInput.focus();
                
                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }
    </script>
</body>
</html>